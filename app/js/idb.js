var _idb={db:null,log:console.log,indexedDB:window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB,setLog:function(e){this.log=e||console.log},getListPromise:function(e,n,o,r){return new Promise(function(t,i){var s,c,u=[],a=function(e){(s=e.target.result)&&(u.push(s.value),s.continue())},d=_idb.db.transaction(e),l=d.objectStore(e);n?(index=l.index(n),r||o?(c=r?IDBKeyRange.bound(o,r):IDBKeyRange.only(o),index.openCursor(c).onsuccess=a):index.openCursor().onsuccess=a):l.openCursor().onsuccess=a,l.openCursor().onerror=function(e){t(e)},d.oncomplete=function(e){t(u)},d.onerror=function(e){_idb.log("Error creating listG of projects",e.target),i(e)}})},getItemPromise:function(e,n){return new Promise(function(o,r){var t={},i=_idb.db.transaction(e),s=i.objectStore(e),c=s.get(n);c.onerror=function(e){_idb.log("error retrieving single item from IDB: ",JSON.stringify(e)),t={}},c.onsuccess=function(e){t=c.result?c.result:{}},i.oncomplete=function(e){o(t)},i.onerror=function(e){_idb.log("Error reading IndexedDB - Single item: ",JSON.stringify(e.target)),r(e)}})},getItemsById:function(e,n,o,r){return new Promise(function(t,i){var s,c,u=0,a=[],d=function(e){if(cursor=event.target.result,cursor){if(!n.length)return;u=n.indexOf(cursor.primaryKey),-1!==u&&(a.push(cursor.value),n=n.slice(u+1));try{cursor.continue(n[0])}catch(e){cursor.continue()}}},l=_idb.db.transaction(e),f=l.objectStore(e);n=n.sort(function(e,n){return e-n}).filter(function(e,n,o){return!n||e!==o[n-1]}),o&&r?(s=f.index(o),c=IDBKeyRange.only(r),s.openCursor(c).onsuccess=d):f.openCursor().onsuccess=d,l.oncomplete=function(e){t(a)},l.onerror=function(e){_idb.log("Error reading IndexedDB - List by Ids: ",e.target),i(e)}})},saveListToIDBG:function(e,n,o){var r,t=this.db.transaction(e,"readwrite"),i=t.objectStore(e);if(o)r=i.clear(),r.onsuccess=function(e){for(var o in n)i.add(n[o])};else for(var s in n)i.put(n[s]);t.oncomplete=function(e){},t.onerror=function(e){_idb.log("saveListToIDBG error: ",e.target)}},removeListPromise:function(e,n){var o=this;return new Promise(function(r,t){var i=o.db.transaction(e,"readwrite"),s=i.objectStore(e);for(var c in n)s.delete(n[c]);i.oncomplete=function(e){r()},i.onerror=function(e){_idb.log("removeListFromIDBG error: ",e.target),t(e)}})},saveItemToIDB:function(e,n,o){var r=this.db.transaction(n,"readwrite"),t=r.objectStore(n);if(e){try{o?t.delete(e):(t.put(e),e.mod&&t.delete(e.mod))}catch(n){_idb.log("saveItemToIDB - ERROR while updating (json): ",JSON.stringify(e).substr(0,500))}r.oncomplete=function(e){},r.onerror=function(e){_idb.log("saveItemToIDB - ERROR: ",e.target)}}},searchTreePattern:function(e,n){return new Promise(function(o,r){var t,i,s,c,u=[],a=function(n){cursor=event.target.result,cursor?(s=cursor.source.keyPath!==cursor.value.etype?cursor.value.nIndex:" ",$m.checkPattern(s,e)&&u.push(cursor.value),cursor.continue()):_idb.log("IDBCursor - searchTreePattern - No more events to read")},d=_idb.ongoingTransaction=_idb.db.transaction("tree"),l=d.objectStore("tree");n.length?(c=n[n.length-1],t=l.index(c.etype),i=IDBKeyRange.only(c.eid),t.openCursor(i).onsuccess=a):l.openCursor().onsuccess=a,d.oncomplete=function(e){o(u)},d.onerror=function(n){_idb.log("Error reading IndexedDB - List of found elements by pattern: ",e),r(n)}})}};